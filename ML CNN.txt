>>> import tensorflow as tf
>>> import keras
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from keras.datasets import mnist
>>> from keras.models import Sequential
>>> from keras.layers import Dense, Dropout, Flatten
>>> from keras.layers import Conv2D, MaxPooling2D
>>> import numpy as np
>>> batch_size=128
>>> num_classes=10
>>> epochs=12
>>> img_rows, img_cols=28,28
>>> print('x_train shape:',x_train.shape)
x_train shape: (60000, 28, 28, 1)
>>> print(x_train.shape[0], 'train samples')
60000 train samples
>>> print(x_test.shape[0], 'test samples')
10000 test samples
>>> y_train = keras.utils.to_categorical(y_train, num_classes
... )
>>> y_test = keras.utils.to_categorical(y_test, num_classes)

>>> model = tf.keras.Sequential()
>>> model.add(tf.keras.layers.Conv2D(filters=64, kernel_size=2, padding='same', activation='relu', input_shape=(28,28,1)))
>>> model.add(tf.keras.layers.MaxPooling2D(pool_size=2))
>>> model.add(tf.keras.layers.Dropout(0.3))
>>> model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))
>>> model.add(tf.keras.layers.MaxPooling2D(pool_size=2))
>>> model.add(tf.keras.layers.Dropout(0.3))
>>> model.add(tf.keras.layers.Flatten())
>>> model.add(tf.keras.layers.Dense(256, activation='relu'))
>>> model.add(tf.keras.layers.Dropout(0.5))
>>> model.add(tf.keras.layers.Dense(10, activation='softmax'))
>>> # Take a look at the model summary
... model.summary()
>>> model.compile(loss='categorical_crossentropy',
...              optimizer='adam',
...              metrics=['accuracy'])
>>> model.fit(x_train, y_train,
...           batch_size=batch_size,
...           epochs=epochs,
...           verbose=1,
...           validation_data=(x_test, y_test))
>>> score=model.evaluate(x_test,y_test,verbose=0)
>>> print('test accuracy:',score[1])
>>model.predict(x_test)