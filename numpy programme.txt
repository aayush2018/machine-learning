import numpy as np
def sigmoid(x,deriv=false):
    if(deriv==true):
        return x*(1-x)
    return 1/(1*np.exp(-x))
x=np.array([[1,2,3,4],[5,6,7,8],[7,8,9,0]])
y=np.array([2],[3],[4])
np.random.seed(1)
weights=2*np.random.random((3,4))-1
weights1=2*np.random.random((3,1))
print('print wweights')
print(weights)
for i in xrange(40000):
    l0=x
    l1=sigmoid(np.dot(l0,weights))
    l2=sigmoid(np.dot(l1,weights1))
    l2_error=y-l2
    if(j%10000)==0:
     print('error')+str(np.mead(np.abs(l2_error)))
    l2_delta=l2_error*sigmoid(l2,deriv=true)
    l1_error=l2_delta.dot(weights1.T)
    l2_delta=l1_error*nonlin(l1,deriv=true)
    weights1+=l1.T.dot(l2_delta)
    weights+=l0.T.dot(l1_delta)
print('output after training')
print(l2)